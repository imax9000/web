---
import type { GetStaticPathsResult } from "astro";
import { type CollectionEntry, getCollection } from "astro:content";
import { getEntry } from "astro:content";
import Sidebar, { generateSidebar } from "src/components/layout/Sidebar.astro";
import {
	Application,
	type DeclarationReflection,
	ReflectionKind,
} from "typedoc";
import config from "../../config.json";
import Layout from "../components/layout/Layout.astro";
import H1 from "../components/markdown/H1.astro";
import H2 from "../components/markdown/H2.astro";
import H3 from "../components/markdown/H3.astro";
import Pre from "../components/markdown/Pre.astro";
import { reflectionShouldBeRendered } from "../lib/rendering/reflectionShouldBeRendered";
import { generateMeta } from "../lib/util/generateMeta";
import {
	externalSymbolLinkMappings,
	resolveReflectionUrl,
} from "../lib/util/resolveUrl";
import { serializeSources } from "../lib/util/typedocSerializeSources";
import ClassPage from "../templates/ClassPage.astro";
import EnumPage from "../templates/EnumPage.astro";
import FunctionPage from "../templates/FunctionPage.astro";
import TypePage from "../templates/TypePage.astro";
import VariablePage from "../templates/VariablePage.astro";

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
	const app = await Application.bootstrap({
		entryPointStrategy: "packages",
		entryPoints: ["packages/*"],
		excludeExternals: true,
		excludeInternal: true,
		excludePrivate: true,
		excludeProtected: true,
		externalSymbolLinkMappings,
	});
	serializeSources(app);
	const project = await app.convert();
	if (!project) throw new Error("Failed to generate documentation.");

	const modules = project.getChildrenByKind(ReflectionKind.Module);

	const pages: GetStaticPathsResult = [];

	for (const module of modules) {
		for (const reflection of module.children || []) {
			if (!reflectionShouldBeRendered(reflection)) continue;

			let path = resolveReflectionUrl(reflection);
			if (!path) {
				throw new Error(`Failed to resolve URL for ${reflection.name}`);
			}
			if (path.startsWith("/")) {
				path = path.slice(1);
			}
			if (
				reflection.kindOf([
					ReflectionKind.Class,
					ReflectionKind.Interface,
					ReflectionKind.TypeAlias,
					ReflectionKind.Enum,
					ReflectionKind.Function,
					ReflectionKind.Variable,
				])
			) {
				pages.push({ params: { path }, props: { reflection } });
			}
		}
	}

	for (const [pkg, categories] of Object.entries(config.guides)) {
		const module = modules.find((m) => m.name === pkg);
		if (!module) {
			throw new Error(`Failed to resolve module ${pkg} for guides.`);
		}
		for (const { guides } of categories) {
			for (const slug of guides) {
				const path = slug.startsWith("global")
					? slug.replace(
						"global",
						`guides/${module.name.split("/")[1]}`,
					)
					: `guides/${slug}`;
				pages.push({
					params: { path },
					props: { guide: await getEntry("guides", slug), module },
				});
			}
		}
	}

	return pages;
}

type DocsTemplate =
	| typeof ClassPage
	| typeof TypePage
	| typeof EnumPage
	| typeof FunctionPage
	| typeof VariablePage;

const DocsTemplates: Partial<Record<ReflectionKind, DocsTemplate>> = {
	[ReflectionKind.Class]: ClassPage,
	[ReflectionKind.Interface]: TypePage,
	[ReflectionKind.TypeAlias]: TypePage,
	[ReflectionKind.Enum]: EnumPage,
	[ReflectionKind.Function]: FunctionPage,
	[ReflectionKind.Variable]: VariablePage,
};

interface Props {
	reflection?: DeclarationReflection;
	guide?: CollectionEntry<"guides">;
	module?: DeclarationReflection;
}

const { reflection, guide, module } = Astro.props;

const DocsTemplate = reflection ? DocsTemplates[reflection.kind] : null;
const { Content: GuideContent = null } = guide ? await guide.render() : {};
---
{
	DocsTemplate ? <DocsTemplate reflection={reflection!} />: GuideContent
		? ((async () => {
			const sidebar = await generateSidebar(module!);
			return (
		<Layout meta={generateMeta(module!, guide)}>
			<Sidebar {...sidebar} slot="sidebar" />
			<div
				class="prose contents first:prose-h1:pt-8 last:prose-p:pb-16 prose-h1:mb-[0.2em] prose-h2:mt-[1em] prose-img:w-4/5 prose-img:mx-auto hover:prose-a:no-underline"
			>
				<GuideContent
					components={{ h1: H1, h2: H2, h3: H3, pre: Pre }}
				/>
			</div>
		</Layout>
	);
	})())
	: ((() => {
		throw new Error("This shouldn't have happened.");
	})())
}
