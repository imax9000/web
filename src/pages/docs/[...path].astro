---
import type { GetStaticPathsResult } from "astro";
import {
	Application,
	type DeclarationReflection,
	ReflectionKind,
} from "typedoc";
import ClassPage from "../../templates/ClassPage.astro";
import { resolveReflectionUrl } from "../../util/resolveUrl";

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
	const app = await Application.bootstrap({
		entryPointStrategy: "packages",
		entryPoints: ["packages/*"],
		excludeExternals: true,
		excludeInternal: true,
	});
	const project = await app.convert();
	if (!project) throw new Error("Failed to generate documentation.");

	const modules = project.getChildrenByKind(ReflectionKind.Module);

	const pages: GetStaticPathsResult = [];

	for (const module of modules) {
		for (const reflection of module.children || []) {
			const path = resolveReflectionUrl(reflection).replace("/docs/", "");
			if (!path) {
				throw new Error(`Failed to resolve URL for ${reflection.name}`);
			}
			if (
				reflection.kindOf([
					ReflectionKind.Class,
					ReflectionKind.Interface,
					ReflectionKind.TypeAlias,
					ReflectionKind.Enum,
					ReflectionKind.Function,
					ReflectionKind.Variable,
				])
			) {
				pages.push({ params: { path }, props: { reflection } });
			}
		}
	}

	return pages;
}

const DocsTemplates = { [ReflectionKind.Class]: ClassPage };

interface Props {
	reflection: DeclarationReflection;
}

const { reflection } = Astro.props;

const Template = DocsTemplates[reflection.kind] || null;
---
{Template && <Template reflection={reflection} />}
