---
import { DeclarationReflection, ReflectionKind } from "typedoc";
import DocsLayout from "../components/layout/DocsLayout.astro";
import { FunctionDocumentation } from "../components/page/FunctionDocumentation";
import { MethodMembers } from "../components/page/MethodMembers";
import { PropertyMembers } from "../components/page/PropertyMembers";
import { TitleSection } from "../components/page/TitleSection";

interface Props {
	reflection: DeclarationReflection;
}

const { reflection } = Astro.props;

const ctor = reflection.getChildrenByKind(ReflectionKind.Constructor)[0];
const properties = reflection.getChildrenByKind(
	ReflectionKind.VariableOrProperty,
).filter((prop) => !prop.flags.isPrivate && !prop.flags.isProtected);
const accessors = reflection.getChildrenByKind(ReflectionKind.Accessor).filter((
	prop,
) => !prop.flags.isPrivate && !prop.flags.isProtected);
const methods = reflection.getChildrenByKind(ReflectionKind.Method).filter((
	method,
) => !method.flags.isPrivate && !method.flags.isProtected);
---

<DocsLayout reflection={reflection}>
	<div class="w-full">
		<TitleSection reflection={reflection} />
	</div>
	{
		ctor && ctor.signatures.some((sig) => sig.parameters?.length)
		? (
			<div class="w-full pl-4 py-8 border-t border-gray-300">
				<FunctionDocumentation reflection={ctor} />
			</div>
		)
		: null
	}
	{
		properties.length ? (
			<div class="w-full pl-4 py-8 border-t border-gray-300">
				<PropertyMembers properties={properties} />
			</div>
		) : null
	}
	{
		accessors.length ? (
			<div class="w-full pl-4 py-8 border-t border-gray-300">
				<PropertyMembers properties={accessors} />
			</div>
		) : null
	}
	{
		methods.length ? (
			<div class="w-full pl-4 py-8 border-t border-gray-300">
				<MethodMembers methods={methods} />
			</div>
		) : null
	}
</DocsLayout>
<script src="../util/handleOverloadInteractivity.ts"></script>
