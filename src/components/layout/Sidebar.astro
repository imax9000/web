---
import { GithubIcon } from "@/assets/icons/GithubIcon.tsx";
import { Logo } from "@/assets/Logo.tsx";
import { DocSearch } from "@docsearch/react";
import { getCollection, type InferEntrySchema } from "astro:content";
import { type DeclarationReflection, ReflectionKind } from "typedoc";
import ShowSidebarButton from "./ShowSidebarButton.astro";
import SidebarDocsSection from "./SidebarDocsSection.astro";

interface Props {
	modules: Array<{ name: string; url: string }>;
	guides: Record<
		string,
		Array<{ data: InferEntrySchema<"guides">; slug: string }>
	>;
	docs: {
		classes: Array<
			{ name: string; url: string; reflection: DeclarationReflection }
		>;
		functions: Array<
			{ name: string; url: string; reflection: DeclarationReflection }
		>;
		enums: Array<
			{ name: string; url: string; reflection: DeclarationReflection }
		>;
		variables: Array<
			{ name: string; url: string; reflection: DeclarationReflection }
		>;
		types: Array<
			{ name: string; url: string; reflection: DeclarationReflection }
		>;
	};
}

export async function generateSidebar(
	module: DeclarationReflection,
): Promise<Props> {
	const packageName = module.name.split("/").pop()!;

	const modules = module.project.getChildrenByKind(ReflectionKind.Module).map(
		(mod) => ({ name: mod.name, url: `docs/${mod.name.split("/").pop()}` })
	);

	const guides =
		(await getCollection(
			"guides",
			({ data }) =>
				data.library === module.name || data.library === "all",
		)).reduce<Props["guides"]>((acc, guide) => {
			const category = guide.data.category;
			if (!acc[category]) {
				acc[category] = [];
			}
			if (guide.slug.startsWith("all")) {
				guide.slug = module.name.split("/")[1] + "/"
					+ guide.slug.slice(4);
			}
			acc[category].push(guide);
			return acc;
		}, {});

	for (const category of Object.values(guides)) {
		category.sort((a, b) => (a.data.sort || 0) - (b.data.sort || 0));
	}

	const docs = (module.children || []).reduce<
		Record<
			"classes" | "functions" | "enums" | "variables" | "types",
			Array<
				{ name: string; url: string; reflection: DeclarationReflection }
			>
		>
	>((acc, child) => {
		const name = child.name;
		switch (child.kind) {
			case ReflectionKind.Class:
				acc.classes.push({
					name,
					url: `docs/${packageName}/classes/${name}`,
					reflection: child,
				});
				break;
			case ReflectionKind.Function:
				acc.functions.push({
					name,
					url: `docs/${packageName}/functions/${name}`,
					reflection: child,
				});
				break;
			case ReflectionKind.Enum:
				acc.enums.push({
					name,
					url: `/ocs/${packageName}/enums/${name}`,
					reflection: child,
				});
				break;
			case ReflectionKind.TypeAlias:
			case ReflectionKind.Interface:
				acc.types.push({
					name,
					url: `docs/${packageName}/types/${name}`,
					reflection: child,
				});
				break;
			case ReflectionKind.Variable:
				acc.variables.push({
					name,
					url: `docs/${packageName}/variables/${name}`,
					reflection: child,
				});
				break;
		}
		return acc;
	}, { classes: [], functions: [], enums: [], types: [], variables: [] });

	return { modules, guides, docs };
}

const { modules, guides, docs } = Astro.props;

const currentModule = modules.find((mod) =>
	Astro.url.pathname.includes(mod.url)
);
const currentReflection = Object.values(docs).flat().find(({ url }) =>
	Astro.url.pathname.endsWith(url)
)?.reflection;

const githubUrl = currentModule
	? `https://github.com/${
		currentModule.name.replace("@skyware", "skyware-js")
	}`
	: "https://github.com/skyware-js";
---
<ShowSidebarButton />
<nav
	class="w-full md:w-96 hidden menu-open:block md:block bg-gray-100 min-w-fit border-r border-r-gray-300 h-screen sticky top-0 left-0 overflow-y-auto overflow-x-hidden"
>
	<div
		class="w-full h-fit flex flex-col items-center justify-center px-8 py-6 gap-6 border-b border-b-gray-300"
	>
		<a href="/">
			<Logo className="h-5 fill-accent" />
		</a>
		<div class="w-full flex flex-row items-center justify-between gap-6">
			<label for="module-switcher" class="sr-only">Select module</label>
			<select
				id="module-switcher"
				class="w-full min-w-52 block bg-gray-100 px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-0 hover:border-gray-500 focus:border-gray-500 text-docs-base leading-6 text-gray-700"
				onchange="window.location.assign(this.value)"
			>
				{
					modules.map(({ name, url }) => (
						<option
							value={"/" + url}
							selected={Astro.url.pathname.split("/")[2] === url.split("/")[1]}
						>
							{name}
						</option>
					))
				}
			</select>
			<a href={githubUrl} class="text-accent">
				<GithubIcon className="h-5 fill-gray-700" />
			</a>
		</div>
	</div>
	<div
		class="w-full flex flex-col items-center justify-center px-8 py-6 gap-6"
	>
		<DocSearch
			client:only="react"
			appId="R2IYF7ETH7"
			apiKey="599cec31baffa4868cae4e79f180729b"
			indexName="docsearch"
		/>
		{
			Object.values(guides).length > 0 && (
				<div class="w-full flex flex-col gap-2">
					<h3 class="text-docs-h3 text-gray-900 font-medium">
						Guides
					</h3>
					<ul class="w-full gap-8 py-2 border-l border-l-gray-300">
						{
							Object.entries(guides).map(([category, items]) => (
								<li class="w-full">
									<SidebarDocsSection
										type="guides"
										title={category}
										section={items.map(({ slug, data }) => ({ ...data, url: "guides/" + slug }))}
									/>
								</li>
							))
						}
					</ul>
				</div>
			)
		}
		<div class="w-full flex flex-col gap-4">
			<h3 class="text-docs-h3 text-gray-900 font-medium">
				Docs
			</h3>
			<ul class="w-full flex flex-col gap-8 border-l border-l-gray-300">
				{
					docs.classes.length ? (
						<li class="w-full">
							<SidebarDocsSection
								type="docs"
								title="Classes"
								section={docs.classes}
								reflection={Astro.url.pathname.includes("classes") && currentReflection || null}
							/>
						</li>
					) : null
				}
				{
					docs.functions.length ? (
						<li class="w-full">
							<SidebarDocsSection
								type="docs"
								title="Functions"
								section={docs.functions}
								reflection={Astro.url.pathname.includes("functions") && currentReflection || null}
							/>
						</li>
					) : null
				}
				{
					docs.enums.length ? (
						<li class="w-full">
							<SidebarDocsSection
								type="docs"
								title="Enums"
								section={docs.enums}
								reflection={Astro.url.pathname.includes("enums") && currentReflection || null}
							/>
						</li>
					) : null
				}
				{
					docs.variables.length ? (
						<li class="w-full">
							<SidebarDocsSection
								type="docs"
								title="Variables"
								section={docs.variables}
								reflection={Astro.url.pathname.includes("variables") && currentReflection || null}
							/>
						</li>
					) : null
				}
				{
					docs.types.length ? (
						<li class="w-full">
							<SidebarDocsSection
								type="docs"
								title="Types"
								section={docs.types}
								reflection={Astro.url.pathname.includes("types") && currentReflection || null}
							/>
						</li>
					) : null
				}
			</ul>
		</div>
	</div>
</nav>
